<h2><span style="color: #003300;"><strong>Physics Based Battery</strong></span></h2>
<h3>&nbsp;</h3>
<h3><strong><span style="color: #0000ff;">Block Description</span></strong></h3>
<p><span style="color: #000000;">This block represents a physics-based battery model. The output voltage is a function of the current drawn from the battery ('Iout'), and the time integral of the current drawn from the battery, ('it', in Amp-hours). You need an integrator that takes in it_dot, and you need to feed that integrated it value into it_base. The initial condition for it_base should be zero, as this integrator should keep track of consumed charge, in amp-hours. If you put in a value other than 100% for SOC_Init_M, then you will see a difference between the it_base (which always starts at zero), and it as you get it from the Outputs structure, which accounts for the difference in SOC_Init_M from 100%.</span></p>
<p>&nbsp;</p>
<h3><strong><span style="color: #0000ff;">Mask Parameters</span></strong></h3>
<table style="border-color: black;" border="yes">
<tbody>
<tr>
<td>E0_M</td>
<td>battery constant voltage (V)</td>
</tr>
<tr>
<td>Q_M</td>
<td>battery capacity (Ah)</td>
</tr>
<tr>
<td>R_M</td>
<td>battery internal resistance (ohm)</td>
</tr>
<tr>
<td>K_M</td>
<td>polarization constant (Ah^-1)</td>
</tr>
<tr>
<td>A_M</td>
<td>exponential zone amplitude (V)</td>
</tr>
<tr>
<td>B_M</td>
<td>exponential zone time constant inverse (Ah^-1)</td>
</tr>
<tr>
<td>SOC_Init_M</td>
<td>initial percentage state of charge (%)</td>
</tr>
<tr>
<td>Tc_0_M</td>
<td>Initial Core Temperature</td>
</tr>
<tr>
<td>Ts_0_M</td>
<td>Initial Surface Temperature</td>
</tr>
<tr>
<td>Cc_M</td>
<td>lumped heat capacity at core of cell (J/K)</td>
</tr>
<tr>
<td>Rc_M</td>
<td>Conduction Resistance b/w core and surface of cell (K/W)</td>
</tr>
<tr>
<td>Cs_M</td>
<td>lumped heat capacity at surface of cell (J/K)</td>
</tr>
<tr>
<td>Ru_M</td>
<td>Convetion Resistance b/w surface and cooling flow (K/W)</td>
</tr>
<tr>
<td>battery_type_M</td>
<td>Li-Ion, Ni-MH, or Lead Acid based chemistry</td>
</tr>
</tbody>
</table>
<h3><strong><span style="color: #0000ff;">Input Variables</span></strong></h3>
<table border="y">
<tbody>
<tr>
<td>it_base</td>
<td>Charge consumed. Obtained by integrating battery current and multiplying by 1/3600 to convert to Ah</td>
</tr>
<tr>
<td>Idemand</td>
<td>Current demand on battery in Amps. Comes from the next component "downstream's" current demand, which the battery block uses to determine the value of Vout as well as the Power Error.</td>
</tr>
<tr>
<td>Temp (Ra)</td>
<td>Input to thermal model for battery core and surface temperature calculations</td>
</tr>
<tr>
<td>Catastrophic Fault Toggle</td>
<td>Boolean to trigger a cascading catastrophic fault, 0 for normal operation.</td>
</tr>
</tbody>
</table>
<h3><strong><span style="color: #0000ff;">Output Variables</span></strong></h3>
<table border="y">
<tbody>
<tr>
<td>Vout</td>
<td>Output voltage</td>
</tr>

<tr>
<td>Outputs</td>
<td>Output voltage, current, power, state of charge, charge being consumed, derivative of charge consumption, heat generation, internal core temperature, and internal surface temperature</td>
</tr>
<tr>
<td>it_Dot</td>
<td>Derivative of charge consumption</td>
</tr>
<tr>
<td>Heat (W)</td>
<td>Heat generated in battery.</td>
</tr>
<tr>
<td>SOC</td>
<td>Battery State of Charge in %</td>
</tr>
<tr>
<td>it</td>
<td>Consumed Charge</td>
</tr>
</tbody>
</table>